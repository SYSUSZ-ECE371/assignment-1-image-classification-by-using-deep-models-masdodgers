2025-05-13 18:52:37,770 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: win32
Python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 4060 Laptop GPU
CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\libnvvp
NVCC: Not Available
MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.42.34438 版
GCC: n/a
PyTorch: 1.12.1+cu113
PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/actions-runner/_work/pytorch/pytorch/builder/windows/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.13.1+cu113
OpenCV: 4.11.0
MMCV: 1.7.1
MMCV Compiler: MSVC 192829924
MMCV CUDA Compiler: 11.3
MMClassification: 0.24.1+
------------------------------------------------------------

2025-05-13 18:52:37,771 - mmcls - INFO - Distributed training: False
2025-05-13 18:52:37,912 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='MobileNetV2', widen_factor=1.0),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=1280,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5)))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224, backend='pillow'),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1), backend='pillow'),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='data/flower_dataset/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224, backend='pillow'),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/flower_dataset/train.txt',
        classes='data/flower_dataset/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='data/flower_dataset/val',
        ann_file='data/flower_dataset/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1), backend='pillow'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/flower_dataset/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1), backend='pillow'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.045, momentum=0.9, weight_decay=4e-05)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', gamma=0.98, step=1)
runner = dict(type='EpochBasedRunner', max_epochs=20)
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'D:\pcdesktop\flower_dataset\mmclassification\checkpoints\mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth'
resume_from = None
workflow = [('train', 1)]
data_root = 'data/flower_dataset'
train_dataloader = dict(
    batch_size=8,
    num_workers=0,
    persistent_workers=False,
    dataset=dict(
        type='ImageNet',
        data_prefix='data/flower_dataset/train',
        ann_file='data/flower_dataset/train.txt',
        classes='data/flower_dataset/classes.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224, backend='pillow'),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]))
val_dataloader = dict(
    batch_size=8,
    num_workers=0,
    persistent_workers=False,
    dataset=dict(
        type='ImageNet',
        data_prefix='data/flower_dataset/val',
        ann_file='data/flower_dataset/val.txt',
        classes='data/flower_dataset/classes.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1), backend='pillow'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
val_evaluator = dict(metric='accuracy', topk=(1, ))
optim_wrapper = dict(
    optimizer=dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=4e-05))
default_hooks = dict(
    checkpoint=dict(save_best='auto', rule='greater'),
    logger=dict(type='TextLoggerHook', interval=100))
device = 'cuda'
visualizer = dict(
    type='TensorboardVisualizer', log_dir='work_dirs/mobilenet_v2_flower')
work_dir = 'work_dirs/flower_mobilenetv2'
gpu_ids = range(0, 1)

2025-05-13 18:52:38,720 - mmcls - INFO - load checkpoint from local path: D:\pcdesktop\flower_dataset\mmclassification\checkpoints\mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth
2025-05-13 18:52:38,745 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 1280]) from checkpoint, the shape in current model is torch.Size([5, 1280]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2025-05-13 18:52:38,746 - mmcls - INFO - Start running, host: pc@LAPTOP-8IGQT47K, work_dir: D:\pcdesktop\flower_dataset\mmclassification\work_dirs\flower_mobilenetv2
2025-05-13 18:52:38,746 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2025-05-13 18:52:38,748 - mmcls - INFO - workflow: [('train', 1)], max: 20 epochs
2025-05-13 18:52:38,748 - mmcls - INFO - Checkpoints will be saved to D:\pcdesktop\flower_dataset\mmclassification\work_dirs\flower_mobilenetv2 by HardDiskBackend.
2025-05-13 18:53:00,184 - mmcls - INFO - Saving checkpoint at 1 epochs
2025-05-13 18:53:07,360 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 27.6224, accuracy_top-5: 100.0000
2025-05-13 18:53:22,896 - mmcls - INFO - Saving checkpoint at 2 epochs
2025-05-13 18:53:26,548 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 41.6084, accuracy_top-5: 100.0000
2025-05-13 18:53:42,364 - mmcls - INFO - Saving checkpoint at 3 epochs
2025-05-13 18:53:45,840 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 34.9650, accuracy_top-5: 100.0000
2025-05-13 18:54:01,057 - mmcls - INFO - Saving checkpoint at 4 epochs
2025-05-13 18:54:04,532 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 40.0350, accuracy_top-5: 100.0000
2025-05-13 18:54:19,859 - mmcls - INFO - Saving checkpoint at 5 epochs
2025-05-13 18:54:23,281 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 39.6853, accuracy_top-5: 100.0000
2025-05-13 18:54:38,475 - mmcls - INFO - Saving checkpoint at 6 epochs
2025-05-13 18:54:41,849 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 54.1958, accuracy_top-5: 100.0000
2025-05-13 18:54:57,475 - mmcls - INFO - Saving checkpoint at 7 epochs
2025-05-13 18:55:00,990 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 52.9720, accuracy_top-5: 100.0000
2025-05-13 18:55:16,529 - mmcls - INFO - Saving checkpoint at 8 epochs
2025-05-13 18:55:20,055 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 49.1259, accuracy_top-5: 100.0000
2025-05-13 18:55:35,444 - mmcls - INFO - Saving checkpoint at 9 epochs
2025-05-13 18:55:38,868 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 38.9860, accuracy_top-5: 100.0000
2025-05-13 18:55:54,658 - mmcls - INFO - Saving checkpoint at 10 epochs
2025-05-13 18:55:58,159 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 42.4825, accuracy_top-5: 100.0000
2025-05-13 18:56:16,168 - mmcls - INFO - Saving checkpoint at 11 epochs
2025-05-13 18:56:19,907 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 46.8531, accuracy_top-5: 100.0000
2025-05-13 18:56:36,452 - mmcls - INFO - Saving checkpoint at 12 epochs
2025-05-13 18:56:40,217 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 47.5524, accuracy_top-5: 100.0000
2025-05-13 18:56:55,594 - mmcls - INFO - Saving checkpoint at 13 epochs
2025-05-13 18:56:59,010 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 48.2517, accuracy_top-5: 100.0000
2025-05-13 18:57:14,399 - mmcls - INFO - Saving checkpoint at 14 epochs
2025-05-13 18:57:18,019 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 55.5944, accuracy_top-5: 100.0000
2025-05-13 18:57:33,534 - mmcls - INFO - Saving checkpoint at 15 epochs
2025-05-13 18:57:37,036 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 52.6224, accuracy_top-5: 100.0000
2025-05-13 18:57:52,576 - mmcls - INFO - Saving checkpoint at 16 epochs
2025-05-13 18:57:56,161 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 43.5315, accuracy_top-5: 100.0000
2025-05-13 18:58:11,371 - mmcls - INFO - Saving checkpoint at 17 epochs
2025-05-13 18:58:14,729 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 55.4196, accuracy_top-5: 100.0000
2025-05-13 18:58:30,466 - mmcls - INFO - Saving checkpoint at 18 epochs
2025-05-13 18:58:34,011 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 54.1958, accuracy_top-5: 100.0000
2025-05-13 18:58:49,566 - mmcls - INFO - Saving checkpoint at 19 epochs
2025-05-13 18:58:53,100 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 56.9930, accuracy_top-5: 100.0000
2025-05-13 18:59:08,561 - mmcls - INFO - Saving checkpoint at 20 epochs
2025-05-13 18:59:12,095 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 59.6154, accuracy_top-5: 100.0000
